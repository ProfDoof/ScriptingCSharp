<p>The purpose of this assignment is to continue practice C++ class implementation
of polymorphic types by expanding the interface and adding new polymorphic classes.</p>

<h2>Overview</h2>

<p>Extend your previous solution for Shapes by adding the methods to determine if
a point is inside a shape, and determine the "thickness" of a shape. Also, create
a utility function to determine the color of a point given an array of Shapes.
And finally, add two new shapes: line and rounded rectangle.</p>

<h2>Insideness</h2>

<p>Provide a function to determine if a point is inside a shape. The following example
code should work.

<pre class=file>
Box b(BLUE,0,1,1,0);
if (b.inside(0.5,0.5))
{
    cout &lt;&lt; "(0.5,0.5) is inside "";
    b.render(cout);
    cout &lt;&lt; std::endl;
}
else
{
    cout &lt;&lt; "(0.5,0.5) is NOT inside "";
    b.render(cout);
    cout &lt;&lt; std::endl;
}
</pre>

<p> See <a target="_blank" rel="noopener noreferrer" href=https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html>this link</a>
for an algorithm (and code) to determine if a point is inside a polygon; other
shapes should be easy.</p>


<h2>Thickness</h2>

<p>Provide a function to determine the "thickness" of a shape. Thickness is the
area of the shape divided by the perimeter of the shape; think of it as the
amount of the area that "belongs" to each unit of the perimeter. The following
should work.

<pre class=file>
Box b(BLUE,0,1,1,0);
cout &lt;&lt; b.thickness() &lt;&lt; std::endl;
</pre>

<h2>Color at point</h2>

<p>Make a function to determine what color is at a point, given an array of
pointers to shapes. The first shape in which the point is inside determines the
color "under" the point. The following should work.</p>

<pre class=file>
Shape *list[];
// code to fill list;
Color c = Shape::colorAtPoint(list,N,2.5,3.7);
if (c == INVALID)
    cout &lt;&lt; "point is not over a shape\n";
else
    cout &lt;&lt; "point code is " &lt;&lt; c &lt;&lt; std::endl;
</pre>


<h2>Line</h2>

<p>A line is a line segment. It has no area. </p>

<pre class=file>
Line ln(RED,1,5,3,-1);   // color, x- and y-ends

ln.end1X(2.5);                  // set/get line's endpoints
double x = ln.end1X();          // similar for end2X, end1Y, end2Y

b.render(cout);                 // should print: Line(RED,2.5,5,3,-1)
</pre>


<h2>Rounded Rectangle</h2>

<p>A rounded box is a rectilinear rectangle whose corners are rounded (quarter
circles). </p>

<pre class=file>
RoundBox b(RED,1,5,3,-1,1.5);   // color, bounds, radius of rounding

b.radius(2.5);                  // set/get box's rounding radius
double r = b.radius();          //

b.render(cout);                 // should print: RoundBox(RED,2.5,5,3,-1,2.5)
</pre>
