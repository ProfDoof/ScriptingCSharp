<p>The purpose of this assignment is to practice C++ class implementation
of polymorphic types.</p>

<h2>Overview</h2>

<p>Create a set of classes derived from class <tt>Shape</tt> for managing
various 2D geometric shapes. In our model, each C++ object will represent a
shape somewhere in the <a href=http://en.wikipedia.org/wiki/Cartesian_coordinate_system>Cartesian coordinate system</a>.
All shapes have the following properties: color, area, perimeter, and location.
Shapes may be acted on to change properties, move location, and "render" (draw) the shape.</p>

<p>Use the following definition for Color.

<pre class=file>
enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };
</pre>

<h2>Shape</h2>

<p>Abstract class from which concrete shapes may be derived. All shapes should
support the following example uses:</p>

<pre class=file>
Shape s;                        // of course you can't actually declare an abstract shape

s.color(BLUE);                  // set shape's color to BLUE
Color c = s.color();            // retreive shape's color

double area = s.area();         // get the area of a shape
double peri = s.perimeter();    // get the perimeter distance of a shape

s.move(3,-1.5);                 // move shape right (3) and down (-1.5)

s.render(cout);                 // "render" (draw) the shape to ostream
</pre>

<p>Create each of the following specific classes which inherit from Shape.</p>


<h2>Box</h2>

<p>A box is a rectilinear rectangle. In addition to the inherited interface,
provide for the following example uses:</p>

<pre class=file>
Box b(RED,1,5,3,-1);            // left, top, right, bottom bounds of the box

b.left(2.5);                    // set/get box's left side coordinate
double left = b.left();         // similar for: right, top, bottom

b.render(cout);                 // should print: Box(RED,2.5,5,3,-1)
</pre>


<h2>Circle</h2>

<p>In addition to the inherited interface,
provide for the following example uses:</p>

<pre class=file>
Circle c(BLUE,3,4,2.1);         // center-x, center-y, radius

c.centerX(2.5);                 // set/get circle's center-x coordinate
double cx = c.centerX();        // similar for: circleY, radius

c.render(cout);                 // should print: Circle(BLUE,2.5,4,2.1)
</pre>


<h2>Triangle</h2>

<p>In addition to the inherited interface,
provide for the following example uses:</p>

<pre class=file>
Triangle t(WHITE,1,1,5,1,3,3);  // x,y for each corner

t.cornerX1(2.5);                // set/get triangles's corner-x-1 coordinate
double cx1 = t.cornerX1();      // similar for X/Y, and 1/2/3

t.render(cout);                 // should print: Triangle(WHITE,2.5,1,5,1,3,3)
</pre>


<h2>Polygon</h2>

<p>A polygon is an ordered list of points which define the vertexes of a closed
shape. In addition to the inherited interface,
provide for the following example uses:</p>

<pre class=file>
double pts[] = {1,1,5,1,3,3};
Polygon p(BLACK,pts,3);         // array contains x,y for each corner

int c = p.points();             // get polygon's vertex count

p.vertexX(2,4.5);               // set/get third vertex's x-coordinate to 4.5
double x = p.vertexX(2);        // similar for: vertexY

p.render(cout);                 // should print: Polygon(BLACK,3,1,1,5,1,4.5,3)
</pre>

<p>In general, when rendering a polygon, the vertex count should appear first,
followed by the x- and y-coordinates of each point in order.</p>

<p>When calculating the area of a polygon, assume it is non-intersecting and
use Paul Bourke's method to calculate its area. This method can be found in your
Canvas course.</p>

<p>Your solution must correctly manage access to private members and functions,
 be const correct, implement operations only once, prevent value semantics, be
commented, and so forth.</p>

<p>The following code is a partial example of how your class will be tested.</p>

<pre class=file>
int main()
{
    double pts[] = {1,1,7,2,3,5,6,8,4,3};
    Shape * list[100];
    int count = 0;
    list[count++] = new Box(BLUE,0,1,1,0);
    list[count++] = new Box(CYAN,2,9,4,3);
    list[count++] = new Circle(WHITE,5,5,3);
    list[count++] = new Triangle(BLACK,1,1,5,1,3,3);
    list[count++] = new Polygon(GREEN,pts,5);

    double distance = 0;
    double area = 0;
    stringstream ss;

    for (int i=0; i&lt;count; i++) {
        distance += list[i]->perimeter();
        area += list[i]->area();
        list[i]->render(ss);
        ss &lt;&lt; "\n";
    }

    for (int i=0; i&lt;count; i++) {
        list[i]->move(10,10);
        list[i]->render(ss);
        ss &lt;&lt; "\n";
    }

    cout &lt;&lt; "distance: " &lt;&lt; distance &lt;&lt; " area: " &lt;&lt; area &lt;&lt; "\n";
    cout &lt;&lt; "drawing: " &lt;&lt; ss.str();
    for (int i=0; i&lt;count; i++)
        delete list[i];
}
</pre>
