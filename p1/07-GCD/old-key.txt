<?php

// Include this at the beginning of every scoring key, 
// with updated numbers for the specific number of tests in each function for that problem
$attempt->queue_tests(array(
	"Compile"   => 1,  
	"Given"     => 2,
	"Format"    => 1,
	"Standard"  => 5, 
	"Random"    => 20, 
	"Edge"      => 2,
	"All"       => 30));
	//the number of tests to be run in each PHP function.

// test_Compile ensures that the source code compiles without error	
// This will probably be exactly the same for every problem
function test_Compile($i) {
	global $attempt;
	//check and see if it compiles
	return compile($attempt->compiler.$attempt->filename)
			&& source_does_not_contain_regex("/for\s*\(/","for loop") 
			&& source_does_not_contain_regex("/while\s*\(/","for loop");  
}

// test_Given checks that the program runs correctly for the examples given in the problem statement;
// check formatting (header line, spacing, etc.) as little as possible
function test_Given($i) {
	$in  = array("6\n8\n", "24\n30\n");
	$out = array(2, 6);
	return run("./a.out",$in[$i]) && output_contains("GCD = $out[$i]\n");	
}

// test_Format again checks using the some of the sample data from the problem statement, 
// but also checks all formatting
function test_Format($i) {
	return run("./a.out","6\n8\n") && output_contains_lines(<<<END
This program calculates the greatest common divisor (GCD) for two integers.

Enter a number: <span class=input>6</span>
Enter another: <span class=input>8</span>

GCD = 2

END
	);
}
               
function test_Standard($i) {
	$in = array(
		"6\n2\n",
		"3\n9\n",
		"40\n30\n",
		"90\n33\n",
		"22\n6\n");
	$out = array(2, 3, 10, 3, 2);
	
	return run("./a.out",$in[$i]) 
		&& output_contains("GCD = $out[$i]\n"); 
	
}

function gcd($m, $n)
{
	if( $n == 0 )
		return $m;
	return gcd($n, $m % $n);	
}

function test_Random($i) {
	$a = rand(1,90); //choose one number
	$b = rand(1,30); //choose two other numbers to make the second number
	$c = rand(1,30);
	$b = $a * $b * $c; //makes sure the GDC of a and b isn't 1 (unless a is 1)
	$case = "$a\n$b\n";
	$ans  = gcd($a,$b);
	   			
   	return run("./a.out",$case) && output_contains("GCD = $ans\n");
   	
   	//creates random numbers, finds the answer, and runs those numbers through the program.   	
}

function test_Edge($i) {
	$in = array(
		"3\n5\n",	//test for cases where gdc = 1
		"5\n5\n");  	//test where numbers are equal
	$out = array(1,5);
	
	return run("./a.out",$in[$i]) && output_contains("GCD = $out[$i]\n"); 
}

function test_All($i) {
	$a = rand(1,100); //choose one number
	$b = rand(1,100); //choose other number
	$case = "$a\n$b\n";
	$ans  = gcd($a,$b);
	   			
   	return run("./a.out",$case) && output_contains("GCD = $ans\n");
   	
   	//creates random numbers, finds the answer, and runs those numbers through the program.   		
}

/*$this->score(0);
$this->score(0) &&

// Program compiles?
$this->compile() &&
$this->score(0.01) &&

// Check that function is recursive
$this->hint("A recursive function should not need a loop") &&
$this->source_does_not_contain_regex("/for\s*\(/","for loop") &&
$this->source_does_not_contain_regex("/while\s*\(/","for loop") &&
$this->score(.03) &&

$this->hint("You need a function gcd that returns an integer") &&
$this->source_contains_C_function("int","gcd") && 
$this->score(.04) &&


// Sample data (2 ways)
$this->hint("") &&
$this->run("24\n30\n") &&
$this->output_contains_lines(<<<END
This program calculates the greatest common divisor (GCD) for two integers.

Enter a number: <span class=input>24</span>
Enter another: <span class=input>30</span>

GCD = 6
END
) && 
$this->score(.05) &&
$this->run("30\n24\n") &&
$this->output_contains_lines(<<<END
This program calculates the greatest common divisor (GCD) for two integers.

Enter a number: <span class=input>30</span>
Enter another: <span class=input>24</span>

GCD = 6
END
) && 
$this->score(.1) &&

// More tests
$this->run("45\n80\n") &&
$this->output_contains("GCD = 5") &&
$this->score(.12) &&

$this->run("60\n45\n") && 
$this->output_contains("GCD = 15") &&
$this->score(.15) &&

$this->run("18\n7\n") &&
$this->output_contains("GCD = 1") &&
$this->score(.18) &&

$this->run("45\n90\n") &&
$this->output_contains("GCD = 45") &&
$this->score(.2) &&

$this->run("10\n10\n") &&
$this->output_contains("GCD = 10") &&
$this->score(.22) &&

$this->run("45\n81\n") &&
$this->output_contains("GCD = 9") &&
$this->score(.25) &&

$this->run("391\n323\n") &&
$this->output_contains("GCD = 17") &&
$this->score(.28) &&

$this->run("1\n1\n") &&
$this->output_contains("GCD = 1") &&
$this->score(.3) &&

$this->run("234\n236\n") &&
$this->output_contains("GCD = 2") &&
$this->score(.32) &&

$this->create_source("test_GCD_recursive.cpp") &&
$this->compile() &&
$this->run("") &&
$this->score(1);
*/
