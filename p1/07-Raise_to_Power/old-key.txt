<?php

// Include this at the beginning of every scoring key, 
// with updated numbers for the specific number of tests in each function for that problem
$attempt->queue_tests(array(
	"Compile"   => 1,  
	"Given"     => 2,
	"Format"    => 1,
	"Standard"  => 5, 
	"Random"    => 20, 
	"Edge"      => 2,
	"All"       => 30));
	//the number of tests to be run in each PHP function.

// test_Compile ensures that the source code compiles without error	
// This will probably be exactly the same for every problem
function test_Compile($i) {
	global $attempt;
	//check and see if it compiles
	return compile($attempt->compiler.$attempt->filename)
		&& source_does_not_contain_regex("/for\s*\(/","for loop") 
		&& source_does_not_contain_regex("/while\s*\(/","for loop");  
}

// test_Given checks that the program runs correctly for the examples given in the problem statement;
// check formatting (header line, spacing, etc.) as little as possible
function test_Given($i) {
	$in  = array("2\n3\n", "3\n2\n");
	$out = array(8, 9);
	return run("./a.out",$in[$i]) && output_contains("$out[$i]");	
}

// test_Format again checks using the some of the sample data from the problem statement, 
// but also checks all formatting
function test_Format($i) {
	return run("./a.out","2\n3\n") && output_contains_lines(<<<END
This program calculates exponential values.
Enter the base:  <span class=input>2</span>
Enter the power: <span class=input>3</span>

2^3 = 8
END
	);
}
               
function test_Standard($i) {
	$in = array(
		"6\n2\n",
		"3\n5\n",
		"4\n2\n",
		"2\n4\n",
		"4\n3\n");
	$out = array(36,243,16,16,64);
	
	return run("./a.out",$in[$i]) 
		&& output_contains("$out[$i]\n"); 
	
}

function test_Random($i) {
	$base = rand(1,9); //choose base number
	$pow = rand(1,9); //choose power
	$case = "$base\n$pow\n";
	$ans  = pow($base,$pow);
	   			
   	return run("./a.out",$case) && output_contains("$ans");
   	
   	//creates random numbers, finds the answer, and runs those numbers through the program.   	
}

function test_Edge($i) {
	$in = array(
		"5\n0\n",	//power 0
		"0\n5\n");  	//base 0
	$out = array(1,0);
	
	return run("./a.out",$in[$i]) && output_contains("$out[$i]"); 
}

function test_All($i) {
	$base = rand(0,9); //choose base number
	$pow = rand(0,9); //choose power
	$case = "$base\n$pow\n";
	$ans  = pow($base,$pow);
	   			
   	return run("./a.out",$case) && output_contains("$ans");
   	
   	//creates random numbers, finds the answer, and runs those numbers through the program.   		
}
