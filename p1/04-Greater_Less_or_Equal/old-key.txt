<?php

// Include this at the beginning of every scoring key, 
// with updated numbers for the specific number of tests in each function for that problem
$attempt->queue_tests(array(
	"Compile"   => 1,  
	"Given"     => 2,
	"Format"    => 1,
	"Standard"  => 5, 
	"Random"    => 20, 
	"Edge"      => 2,
	"All"       => 30));
	//the number of tests to be run in each PHP function.

// test_Compile ensures that the source code compiles without error	
// This will probably be exactly the same for every problem
function test_Compile($i) {
	global $attempt;
	//check and see if it compiles
	return compile($attempt->compiler.$attempt->filename); 
}

// test_Given checks that the program runs correctly for the examples given in the problem statement;
// check formatting (header line, spacing, etc.) as little as possible
function test_Given($i) {
	$in  = array("5\n2\n", "7\n8\n");
	$out = array("5 is greater than 2", "7 is less than 8");
	return run("./a.out",$in[$i]) && output_contains("$out[$i]");
	
	
}

// test_Format again checks using the some of the sample data from the problem statement, 
// but also checks all formatting

function test_Format($i) {
	
	return run("./a.out","5\n2\n") && output_contains_lines(<<<END
This program determines the relationship between two input numbers.
Enter the first integer: <span class=input>5</span>
Enter the second integer: <span class=input>2</span>
5 is greater than 2
END
	);
}
               
function test_Standard($i) {
	$in = array(
		"4\n4\n",
		"87\n64\n",
		"8\n8\n",
		"6\n9\n",
		"1\n4\n");
	$out = array("4 is equal to 4", "87 is greater than 64", "8 is equal to 8",
				 "6 is less than 9", "1 is less than 4");
	
	return run("./a.out",$in[$i]) 
		&& output_contains("$out[$i]"); 
	
}

function test_Random($i) {
	$n1 = rand(0, 50);
	$n2 = rand(0, 50);
	$case = "$n1\n$n2\n";
	if($n1 < $n2)
		$ans = "$n1 is less than $n2";
	else if($n1 > $n2)
		$ans = "$n1 is greater than $n2";
	else 
		$ans = "$n1 is equal to $n2";
	
	return run("./a.out",$case) && output_contains("$ans");
}

function test_Edge($i) {
	$in = array("-5\n-7\n", "-5\n-5\n"); //check to see if negatives confuse things
	$out = array("-5 is greater than -7", "-5 is equal to -5");	
	return run("./a.out",$in[$i]) && output_contains("$out[$i]"); 
}

function test_All($i) {
	$n1 = rand(-500, 500);
	$n2 = rand(-500, 500);
	$case = "$n1\n$n2\n";
	if($n1 < $n2)
		$ans = "$n1 is less than $n2";
	else if($n1 > $n2)
		$ans = "$n1 is greater than $n2";
	else 
		$ans = "$n1 is equal to $n2";
	
	return run("./a.out",$case) && output_contains("$ans");
}

