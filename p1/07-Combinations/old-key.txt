<?php

// Include this at the beginning of every scoring key, 
// with updated numbers for the specific number of tests in each function for that problem
$attempt->queue_tests(array(
	"Compile"   => 1,  
	"Given"     => 2,
	"Format"    => 1,
	"Standard"  => 5, 
	"Random"    => 20, 
	"Edge"      => 2,
	"All"       => 30));
	//the number of tests to be run in each PHP function.

// test_Compile ensures that the source code compiles without error	
// This will probably be exactly the same for every problem
function test_Compile($i) {
	global $attempt;
	//check and see if it compiles
	return compile($attempt->compiler.$attempt->filename)
			&& source_contains_C_function("int","Combinations");  
}

// test_Given checks that the program runs correctly for the examples given in the problem statement;
// check formatting (header line, spacing, etc.) as little as possible
function test_Given($i) {
	$in  = array("6\n2\n", "8\n4\n");
	$out = array(15, 70);
	return run("./a.out",$in[$i]) && output_contains("$out[$i]");	
}

// test_Format again checks using the some of the sample data from the problem statement, 
// but also checks all formatting
function test_Format($i) {
	return run("./a.out","6\n2\n") && output_contains_lines(<<<END
Enter an Integer: <span class=input>6</span>
Enter another Integer: <span class=input>2</span>
Combinations(6,2) = 15
END
	);
}
               
function test_Standard($i) {
	$in = array(
		"8\n6\n",
		"9\n3\n",
		"10\n2\n",
		"11\n3\n",
		"9\n6\n");
	$out = array(28, 84, 45, 165, 84);
	
	return run("./a.out",$in[$i]) 
		&& output_contains("$out[$i]"); 
	
}

function fact($m)
{
	$ret = 1;
    for($i=1; $i<=$m; $i++)
        $ret *= $i;
    return $ret;
}

function test_Random($i) {
	$a = rand(3,11); 
	$b = rand(1,10);
	while($b >= $a)	//make sure b is smaller
		$b = rand(1,10);
		
	$case = "$a\n$b\n";
	$ans  = fact($a)/(fact($b)*fact($a-$b));
	   			
   	return run("./a.out",$case) && output_contains(" $ans");
   	
   	//creates random numbers, finds the answer, and runs those numbers through the program.   	
}

function test_Edge($i) {
	$in = array(
		"5\n5\n",	//test where they're equal
		"4\n5\n");  	//test where first is smaller (should be 0)
	$out = array(1,0);
	
	return run("./a.out",$in[$i]) && output_contains("$out[$i]"); 
}

function test_All($i) {
	$a = rand(3,11); 
	$b = rand(1,10);
	while($b >= $a)	//make sure b is smaller
		$b = rand(1,10);	
	
	$case = "$a\n$b\n";
	$ans  = round(fact($a)/(fact($b)*fact($a-$b)));
	   			
   	return run("./a.out",$case) && output_contains(" $ans");
   	
   	//creates random numbers, finds the answer, and runs those numbers through the program.    		
}



